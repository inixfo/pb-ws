"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
Whttps://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-oqib9m00m3$=h@-3k@ap7#9me%hz3xixo39n-e=xik&^i)=^f('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['52.62.201.84', 'localhost', '127.0.0.1', 'phonebay.xyz', 'www.phonebay.xyz']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    'django_filters',
    'social_django',  # Add social_django for Google OAuth
    
    # Custom apps
    'users',
    'products',
    'orders',
    'vendors',
    'notifications',
    'reviews',
    'analytics',
    'emi',
    'adminpanel',
    'payments',
    'shipping',
    'wishlist',
    'promotions',
    'contact',
    'sms',
]

# Set custom user model
AUTH_USER_MODEL = 'users.User'

# Google OAuth Settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '988564065705-pat9e6cesim147njv6ddof095gmk7hhn.apps.googleusercontent.com'  # Google Client ID
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'  # Google Client Secret - set this in production
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# Social Auth Pipeline
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',  # Look up existing user by email
    'users.pipeline.create_user',  # Custom pipeline function to create users
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# CORS settings
CORS_ALLOWED_ORIGINS = [
    'http://52.62.201.84',
    'https://52.62.201.84',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:5174',
    'http://localhost:5173',
    'http://phonebay.xyz',
    'https://phonebay.xyz',
    'http://www.phonebay.xyz',
    'https://www.phonebay.xyz',
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware first!
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'products.middleware.ImageResizingMiddleware',  # Add image resizing middleware
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'products' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'pbws'),
        'USER': os.getenv('DB_USER', 'pbws'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'PbWs2025'),
        'HOST': os.getenv('DB_HOST', '52.62.201.84'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SSLCOMMERZ Payment Gateway Settings (for development)
SSLCOMMERZ_STORE_ID = 'testpb0live'
SSLCOMMERZ_STORE_PASSWORD = 'testpb0live33333'
SSLCOMMERZ_STORE_NAME = 'Phone Bay Test'
SSLCOMMERZ_IS_SANDBOX = True
SSLCOMMERZ_API_URL = 'https://sandbox.sslcommerz.com/gwprocess/v4/api'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    
    # Add these settings for better debugging and proper token verification
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

# Increase logging to diagnose authentication issues
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'rest_framework_simplejwt': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Import local settings if they exist
try:
    from .local_settings import *
except ImportError:
    pass

# SSLCOMMERZ Payment Gateway Settings
# These can be overridden in local_settings.py for production
STORE_ID = os.getenv('SSLCOMMERZ_STORE_ID', 'testbox')  # Default sandbox store ID
STORE_PASSWORD = os.getenv('SSLCOMMERZ_STORE_PASSWORD', 'qwerty')  # Default sandbox password
STORE_NAME = os.getenv('STORE_NAME', 'Phone Bay')
SSLCOMMERZ_SANDBOX = os.getenv('SSLCOMMERZ_SANDBOX', 'True').lower() == 'true'

# Payment Gateway URLs
FRONTEND_BASE_URL = os.getenv('FRONTEND_BASE_URL', 'https://phonebay.xyz')
BACKEND_BASE_URL = os.getenv('BACKEND_BASE_URL', 'https://phonebay.xyz/admin')

# SSLCOMMERZ callback URLs
SSLCOMMERZ_SUCCESS_URL = f'{BACKEND_BASE_URL}/api/payments/success/'
SSLCOMMERZ_FAIL_URL = f'{BACKEND_BASE_URL}/api/payments/failed/'
SSLCOMMERZ_CANCEL_URL = f'{BACKEND_BASE_URL}/api/payments/canceled/'
SSLCOMMERZ_IPN_URL = f'{BACKEND_BASE_URL}/api/payments/ipn/'

# Payment processing settings
PAYMENT_TIMEOUT = 30  # minutes
MAX_PAYMENT_RETRY = 3

# SMS API Settings (SSL Wireless)
SMS_API_URL = os.getenv('SMS_API_URL', 'https://smsplus.sslwireless.com')
SMS_API_SID = os.getenv('SMS_API_SID', 'PHONEBAYBRAND')  # SSL Wireless SID
SMS_API_TOKEN = os.getenv('SMS_API_TOKEN', '4v32ycsy-q0f22usn-qk8aminl-g78imsro-hzhagexp')  # SSL Wireless API token
SMS_BRAND_NAME = os.getenv('SMS_BRAND_NAME', 'Phone Bay')
SMS_TEST_MODE = os.getenv('SMS_TEST_MODE', 'False').lower() == 'true'  # Set to False for live mode

# SMS template defaults
DEFAULT_SMS_TEMPLATES = {
    'welcome': 'Welcome to Phone Bay! Your account has been created successfully. Shop the latest mobile phones and accessories.',
    'verification': 'Your Phone Bay verification code is {code}. Valid for {expiry} minutes.',
    'order_confirmation': 'Thank you for your order {name}! Your order #{order_id} has been received and is being processed. Total: {total} BDT.',
    'payment_success': 'Payment received for your order #{order_id}. Amount: {total} BDT. Thank you for shopping with Phone Bay!',
    'order_status': 'Your order #{order_id} status has been updated to: {status}. Track your order on our website.',
    'emi_reminder': 'Reminder: Your EMI payment of {amount} BDT for order #{order_id} is due on {due_date}. Please make your payment to avoid late fees.'
}
