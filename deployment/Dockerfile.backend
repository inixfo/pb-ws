FROM python:3.10-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_SETTINGS_MODULE=backend.settings_prod \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    PYTHONPATH=/app

# Set work directory
WORKDIR /app

# Install system dependencies and clean up in the same layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libjpeg-dev \
    zlib1g-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --upgrade pip

# Copy only requirements file first to leverage Docker cache
COPY backend/requirements.txt .

# Install Python dependencies and clean pip cache
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir gunicorn psycopg2-binary Pillow requests && \
    pip cache purge && \
    rm -rf ~/.cache/pip

# Copy SSLCommerz installation script and install it
COPY deployment/install_sslcommerz.py .
RUN python install_sslcommerz.py && \
    pip cache purge && \
    rm -rf ~/.cache/pip

# Now copy the rest of the application
COPY backend/ .

# Create a non-root user
RUN adduser --disabled-password --gecos '' django && \
    chown -R django:django /app

# Switch to non-root user
USER django

# Backend stage
FROM base as backend
# Collect static files
RUN python manage.py collectstatic --noinput --clear
# Expose port
EXPOSE 8000
# Run gunicorn
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi:application"]

# Celery stage - make slimmer by starting fresh from base
FROM base as celery
ENV C_FORCE_ROOT=1
CMD ["celery", "-A", "backend", "worker", "-l", "info"]

# Celery beat stage - make slimmer by starting fresh from base
FROM base as celery-beat
ENV C_FORCE_ROOT=1
CMD ["celery", "-A", "backend", "beat", "-l", "info"] 